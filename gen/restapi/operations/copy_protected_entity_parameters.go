// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/vmware-tanzu/astrolabe/gen/models"
)

// NewCopyProtectedEntityParams creates a new CopyProtectedEntityParams object
//
// There are no default values defined in the spec.
func NewCopyProtectedEntityParams() CopyProtectedEntityParams {

	return CopyProtectedEntityParams{}
}

// CopyProtectedEntityParams contains all the bound params for the copy protected entity operation
// typically these are obtained from a http.Request
//
// swagger:parameters copyProtectedEntity
type CopyProtectedEntityParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Copy Parameters including protected entity to copy
	  Required: true
	  In: body
	*/
	Body *models.CopyParameters
	/*How to handle the copy.  create - a new protected entity with the
	Protected Entity ID will be created.  If the Protected Entity ID
	already exists, the copy will fail.  create_new - A Protected Entity
	with a new ID will be created with data and metadata from the source
	protected entity.  Update - If a protected entity with the same ID
	exists it will be overwritten.  If there is no PE with that ID, one
	will be created with the same ID. For complex Persistent Entities,
	the mode will be applied to all of the component entities that are
	part of this operation as well.

	  Required: true
	  In: query
	*/
	Mode string
	/*The service to copy the protected entity into
	  Required: true
	  In: path
	*/
	Service string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCopyProtectedEntityParams() beforehand.
func (o *CopyProtectedEntityParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.CopyParameters
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	qMode, qhkMode, _ := qs.GetOK("mode")
	if err := o.bindMode(qMode, qhkMode, route.Formats); err != nil {
		res = append(res, err)
	}

	rService, rhkService, _ := route.Params.GetOK("service")
	if err := o.bindService(rService, rhkService, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMode binds and validates parameter Mode from query.
func (o *CopyProtectedEntityParams) bindMode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("mode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("mode", "query", raw); err != nil {
		return err
	}
	o.Mode = raw

	if err := o.validateMode(formats); err != nil {
		return err
	}

	return nil
}

// validateMode carries on validations for parameter Mode
func (o *CopyProtectedEntityParams) validateMode(formats strfmt.Registry) error {

	if err := validate.EnumCase("mode", "query", o.Mode, []interface{}{"create", "create_new", "update"}, true); err != nil {
		return err
	}

	return nil
}

// bindService binds and validates parameter Service from path.
func (o *CopyProtectedEntityParams) bindService(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Service = raw

	return nil
}
