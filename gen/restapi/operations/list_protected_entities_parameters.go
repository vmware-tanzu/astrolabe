// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProtectedEntitiesParams creates a new ListProtectedEntitiesParams object
//
// There are no default values defined in the spec.
func NewListProtectedEntitiesParams() ListProtectedEntitiesParams {

	return ListProtectedEntitiesParams{}
}

// ListProtectedEntitiesParams contains all the bound params for the list protected entities operation
// typically these are obtained from a http.Request
//
// swagger:parameters listProtectedEntities
type ListProtectedEntitiesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Results will be returned that come after this ID
	  In: query
	*/
	IdsAfter *string
	/*The maximum number of results to return (fewer results may be returned)
	  In: query
	*/
	MaxResults *int32
	/*The service to list protected entities from
	  Required: true
	  In: path
	*/
	Service string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListProtectedEntitiesParams() beforehand.
func (o *ListProtectedEntitiesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIdsAfter, qhkIdsAfter, _ := qs.GetOK("idsAfter")
	if err := o.bindIdsAfter(qIdsAfter, qhkIdsAfter, route.Formats); err != nil {
		res = append(res, err)
	}

	qMaxResults, qhkMaxResults, _ := qs.GetOK("maxResults")
	if err := o.bindMaxResults(qMaxResults, qhkMaxResults, route.Formats); err != nil {
		res = append(res, err)
	}

	rService, rhkService, _ := route.Params.GetOK("service")
	if err := o.bindService(rService, rhkService, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIdsAfter binds and validates parameter IdsAfter from query.
func (o *ListProtectedEntitiesParams) bindIdsAfter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.IdsAfter = &raw

	return nil
}

// bindMaxResults binds and validates parameter MaxResults from query.
func (o *ListProtectedEntitiesParams) bindMaxResults(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("maxResults", "query", "int32", raw)
	}
	o.MaxResults = &value

	return nil
}

// bindService binds and validates parameter Service from path.
func (o *ListProtectedEntitiesParams) bindService(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Service = raw

	return nil
}
