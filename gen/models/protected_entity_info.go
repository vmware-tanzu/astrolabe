// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectedEntityInfo protected entity info
//
// swagger:model ProtectedEntityInfo
type ProtectedEntityInfo struct {

	// combined transports
	// Required: true
	CombinedTransports []*DataTransport `json:"combinedTransports"`

	// component specs
	// Required: true
	ComponentSpecs []*ComponentSpec `json:"componentSpecs"`

	// data transports
	// Required: true
	DataTransports []*DataTransport `json:"dataTransports"`

	// id
	// Required: true
	ID ProtectedEntityID `json:"id"`

	// metadata transports
	// Required: true
	MetadataTransports []*DataTransport `json:"metadataTransports"`

	// name
	// Required: true
	Name *string `json:"name"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this protected entity info
func (m *ProtectedEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCombinedTransports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataTransports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataTransports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedEntityInfo) validateCombinedTransports(formats strfmt.Registry) error {

	if err := validate.Required("combinedTransports", "body", m.CombinedTransports); err != nil {
		return err
	}

	for i := 0; i < len(m.CombinedTransports); i++ {
		if swag.IsZero(m.CombinedTransports[i]) { // not required
			continue
		}

		if m.CombinedTransports[i] != nil {
			if err := m.CombinedTransports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("combinedTransports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedEntityInfo) validateComponentSpecs(formats strfmt.Registry) error {

	if err := validate.Required("componentSpecs", "body", m.ComponentSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.ComponentSpecs); i++ {
		if swag.IsZero(m.ComponentSpecs[i]) { // not required
			continue
		}

		if m.ComponentSpecs[i] != nil {
			if err := m.ComponentSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedEntityInfo) validateDataTransports(formats strfmt.Registry) error {

	if err := validate.Required("dataTransports", "body", m.DataTransports); err != nil {
		return err
	}

	for i := 0; i < len(m.DataTransports); i++ {
		if swag.IsZero(m.DataTransports[i]) { // not required
			continue
		}

		if m.DataTransports[i] != nil {
			if err := m.DataTransports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataTransports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedEntityInfo) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ProtectedEntityInfo) validateMetadataTransports(formats strfmt.Registry) error {

	if err := validate.Required("metadataTransports", "body", m.MetadataTransports); err != nil {
		return err
	}

	for i := 0; i < len(m.MetadataTransports); i++ {
		if swag.IsZero(m.MetadataTransports[i]) { // not required
			continue
		}

		if m.MetadataTransports[i] != nil {
			if err := m.MetadataTransports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadataTransports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedEntityInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedEntityInfo) UnmarshalBinary(b []byte) error {
	var res ProtectedEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
