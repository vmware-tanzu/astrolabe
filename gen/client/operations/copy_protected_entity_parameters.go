// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware-tanzu/astrolabe/gen/models"
)

// NewCopyProtectedEntityParams creates a new CopyProtectedEntityParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCopyProtectedEntityParams() *CopyProtectedEntityParams {
	return &CopyProtectedEntityParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCopyProtectedEntityParamsWithTimeout creates a new CopyProtectedEntityParams object
// with the ability to set a timeout on a request.
func NewCopyProtectedEntityParamsWithTimeout(timeout time.Duration) *CopyProtectedEntityParams {
	return &CopyProtectedEntityParams{
		timeout: timeout,
	}
}

// NewCopyProtectedEntityParamsWithContext creates a new CopyProtectedEntityParams object
// with the ability to set a context for a request.
func NewCopyProtectedEntityParamsWithContext(ctx context.Context) *CopyProtectedEntityParams {
	return &CopyProtectedEntityParams{
		Context: ctx,
	}
}

// NewCopyProtectedEntityParamsWithHTTPClient creates a new CopyProtectedEntityParams object
// with the ability to set a custom HTTPClient for a request.
func NewCopyProtectedEntityParamsWithHTTPClient(client *http.Client) *CopyProtectedEntityParams {
	return &CopyProtectedEntityParams{
		HTTPClient: client,
	}
}

/* CopyProtectedEntityParams contains all the parameters to send to the API endpoint
   for the copy protected entity operation.

   Typically these are written to a http.Request.
*/
type CopyProtectedEntityParams struct {

	/* Body.

	   Copy Parameters including protected entity to copy
	*/
	Body *models.CopyParameters

	/* Mode.

	     How to handle the copy.  create - a new protected entity with the
	Protected Entity ID will be created.  If the Protected Entity ID
	already exists, the copy will fail.  create_new - A Protected Entity
	with a new ID will be created with data and metadata from the source
	protected entity.  Update - If a protected entity with the same ID
	exists it will be overwritten.  If there is no PE with that ID, one
	will be created with the same ID. For complex Persistent Entities,
	the mode will be applied to all of the component entities that are
	part of this operation as well.

	*/
	Mode string

	/* Service.

	   The service to copy the protected entity into
	*/
	Service string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the copy protected entity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CopyProtectedEntityParams) WithDefaults() *CopyProtectedEntityParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the copy protected entity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CopyProtectedEntityParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the copy protected entity params
func (o *CopyProtectedEntityParams) WithTimeout(timeout time.Duration) *CopyProtectedEntityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the copy protected entity params
func (o *CopyProtectedEntityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the copy protected entity params
func (o *CopyProtectedEntityParams) WithContext(ctx context.Context) *CopyProtectedEntityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the copy protected entity params
func (o *CopyProtectedEntityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the copy protected entity params
func (o *CopyProtectedEntityParams) WithHTTPClient(client *http.Client) *CopyProtectedEntityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the copy protected entity params
func (o *CopyProtectedEntityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the copy protected entity params
func (o *CopyProtectedEntityParams) WithBody(body *models.CopyParameters) *CopyProtectedEntityParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the copy protected entity params
func (o *CopyProtectedEntityParams) SetBody(body *models.CopyParameters) {
	o.Body = body
}

// WithMode adds the mode to the copy protected entity params
func (o *CopyProtectedEntityParams) WithMode(mode string) *CopyProtectedEntityParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the copy protected entity params
func (o *CopyProtectedEntityParams) SetMode(mode string) {
	o.Mode = mode
}

// WithService adds the service to the copy protected entity params
func (o *CopyProtectedEntityParams) WithService(service string) *CopyProtectedEntityParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the copy protected entity params
func (o *CopyProtectedEntityParams) SetService(service string) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *CopyProtectedEntityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// query param mode
	qrMode := o.Mode
	qMode := qrMode
	if qMode != "" {

		if err := r.SetQueryParam("mode", qMode); err != nil {
			return err
		}
	}

	// path param service
	if err := r.SetPathParam("service", o.Service); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
