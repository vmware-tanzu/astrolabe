// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtectedEntityTypeManagerClient is the client API for ProtectedEntityTypeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtectedEntityTypeManagerClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error)
	GetTypeName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTypeNameResponse, error)
	GetProtectedEntities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProtectedEntitiesResponse, error)
	CopyFromInfo(ctx context.Context, in *CopyFromInfoRequest, opts ...grpc.CallOption) (*CopyFromInfoResponse, error)
	// Methods for ProtectedEntity and Reader are here for simplicity
	// Protected Entity
	GetInfo(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ProtectedEntityInfo, error)
	GetCombinedInfo(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*GetCombinedInfoResponse, error)
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*ProtectedEntitySnapshotID, error)
	ListSnapshots(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	GetInfoForSnapshot(ctx context.Context, in *GetInfoForSnapshotRequest, opts ...grpc.CallOption) (*ProtectedEntityInfo, error)
	GetComponents(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*GetComponentsResponse, error)
	GetMetadataReader(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ReaderResponse, error)
	GetDataReader(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ReaderResponse, error)
	// ReaderCloser
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// ReaderAt
	ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error)
}

type protectedEntityTypeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProtectedEntityTypeManagerClient(cc grpc.ClientConnInterface) ProtectedEntityTypeManagerClient {
	return &protectedEntityTypeManagerClient{cc}
}

func (c *protectedEntityTypeManagerClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetTypeName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTypeNameResponse, error) {
	out := new(GetTypeNameResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetTypeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetProtectedEntities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProtectedEntitiesResponse, error) {
	out := new(GetProtectedEntitiesResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetProtectedEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) CopyFromInfo(ctx context.Context, in *CopyFromInfoRequest, opts ...grpc.CallOption) (*CopyFromInfoResponse, error) {
	out := new(CopyFromInfoResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/CopyFromInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetInfo(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ProtectedEntityInfo, error) {
	out := new(ProtectedEntityInfo)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetCombinedInfo(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*GetCombinedInfoResponse, error) {
	out := new(GetCombinedInfoResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetCombinedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*ProtectedEntitySnapshotID, error) {
	out := new(ProtectedEntitySnapshotID)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) ListSnapshots(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/ListSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/DeleteSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetInfoForSnapshot(ctx context.Context, in *GetInfoForSnapshotRequest, opts ...grpc.CallOption) (*ProtectedEntityInfo, error) {
	out := new(ProtectedEntityInfo)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetInfoForSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetComponents(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*GetComponentsResponse, error) {
	out := new(GetComponentsResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetMetadataReader(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ReaderResponse, error) {
	out := new(ReaderResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetMetadataReader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) GetDataReader(ctx context.Context, in *ProtectedEntityID, opts ...grpc.CallOption) (*ReaderResponse, error) {
	out := new(ReaderResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/GetDataReader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protectedEntityTypeManagerClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/generated.ProtectedEntityTypeManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtectedEntityTypeManagerServer is the server API for ProtectedEntityTypeManager service.
// All implementations must embed UnimplementedProtectedEntityTypeManagerServer
// for forward compatibility
type ProtectedEntityTypeManagerServer interface {
	Init(context.Context, *InitRequest) (*Empty, error)
	GetTypeName(context.Context, *Empty) (*GetTypeNameResponse, error)
	GetProtectedEntities(context.Context, *Empty) (*GetProtectedEntitiesResponse, error)
	CopyFromInfo(context.Context, *CopyFromInfoRequest) (*CopyFromInfoResponse, error)
	// Methods for ProtectedEntity and Reader are here for simplicity
	// Protected Entity
	GetInfo(context.Context, *ProtectedEntityID) (*ProtectedEntityInfo, error)
	GetCombinedInfo(context.Context, *ProtectedEntityID) (*GetCombinedInfoResponse, error)
	Snapshot(context.Context, *SnapshotRequest) (*ProtectedEntitySnapshotID, error)
	ListSnapshots(context.Context, *ProtectedEntityID) (*ListSnapshotsResponse, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	GetInfoForSnapshot(context.Context, *GetInfoForSnapshotRequest) (*ProtectedEntityInfo, error)
	GetComponents(context.Context, *ProtectedEntityID) (*GetComponentsResponse, error)
	GetMetadataReader(context.Context, *ProtectedEntityID) (*ReaderResponse, error)
	GetDataReader(context.Context, *ProtectedEntityID) (*ReaderResponse, error)
	// ReaderCloser
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// ReaderAt
	ReadAt(context.Context, *ReadAtRequest) (*ReadResponse, error)
	Close(context.Context, *CloseRequest) (*Empty, error)
	mustEmbedUnimplementedProtectedEntityTypeManagerServer()
}

// UnimplementedProtectedEntityTypeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProtectedEntityTypeManagerServer struct {
}

func (UnimplementedProtectedEntityTypeManagerServer) Init(context.Context, *InitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetTypeName(context.Context, *Empty) (*GetTypeNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeName not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetProtectedEntities(context.Context, *Empty) (*GetProtectedEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtectedEntities not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) CopyFromInfo(context.Context, *CopyFromInfoRequest) (*CopyFromInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFromInfo not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetInfo(context.Context, *ProtectedEntityID) (*ProtectedEntityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetCombinedInfo(context.Context, *ProtectedEntityID) (*GetCombinedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombinedInfo not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) Snapshot(context.Context, *SnapshotRequest) (*ProtectedEntitySnapshotID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) ListSnapshots(context.Context, *ProtectedEntityID) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetInfoForSnapshot(context.Context, *GetInfoForSnapshotRequest) (*ProtectedEntityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoForSnapshot not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetComponents(context.Context, *ProtectedEntityID) (*GetComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponents not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetMetadataReader(context.Context, *ProtectedEntityID) (*ReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataReader not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) GetDataReader(context.Context, *ProtectedEntityID) (*ReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataReader not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) ReadAt(context.Context, *ReadAtRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) Close(context.Context, *CloseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedProtectedEntityTypeManagerServer) mustEmbedUnimplementedProtectedEntityTypeManagerServer() {
}

// UnsafeProtectedEntityTypeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtectedEntityTypeManagerServer will
// result in compilation errors.
type UnsafeProtectedEntityTypeManagerServer interface {
	mustEmbedUnimplementedProtectedEntityTypeManagerServer()
}

func RegisterProtectedEntityTypeManagerServer(s grpc.ServiceRegistrar, srv ProtectedEntityTypeManagerServer) {
	s.RegisterService(&ProtectedEntityTypeManager_ServiceDesc, srv)
}

func _ProtectedEntityTypeManager_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetTypeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetTypeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetTypeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetTypeName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetProtectedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetProtectedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetProtectedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetProtectedEntities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_CopyFromInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFromInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).CopyFromInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/CopyFromInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).CopyFromInfo(ctx, req.(*CopyFromInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetInfo(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetCombinedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetCombinedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetCombinedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetCombinedInfo(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/ListSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).ListSnapshots(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetInfoForSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoForSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetInfoForSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetInfoForSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetInfoForSnapshot(ctx, req.(*GetInfoForSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetComponents(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetMetadataReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetMetadataReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetMetadataReader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetMetadataReader(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_GetDataReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectedEntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).GetDataReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/GetDataReader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).GetDataReader(ctx, req.(*ProtectedEntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).ReadAt(ctx, req.(*ReadAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtectedEntityTypeManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedEntityTypeManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ProtectedEntityTypeManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedEntityTypeManagerServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtectedEntityTypeManager_ServiceDesc is the grpc.ServiceDesc for ProtectedEntityTypeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtectedEntityTypeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.ProtectedEntityTypeManager",
	HandlerType: (*ProtectedEntityTypeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ProtectedEntityTypeManager_Init_Handler,
		},
		{
			MethodName: "GetTypeName",
			Handler:    _ProtectedEntityTypeManager_GetTypeName_Handler,
		},
		{
			MethodName: "GetProtectedEntities",
			Handler:    _ProtectedEntityTypeManager_GetProtectedEntities_Handler,
		},
		{
			MethodName: "CopyFromInfo",
			Handler:    _ProtectedEntityTypeManager_CopyFromInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _ProtectedEntityTypeManager_GetInfo_Handler,
		},
		{
			MethodName: "GetCombinedInfo",
			Handler:    _ProtectedEntityTypeManager_GetCombinedInfo_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _ProtectedEntityTypeManager_Snapshot_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _ProtectedEntityTypeManager_ListSnapshots_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _ProtectedEntityTypeManager_DeleteSnapshot_Handler,
		},
		{
			MethodName: "GetInfoForSnapshot",
			Handler:    _ProtectedEntityTypeManager_GetInfoForSnapshot_Handler,
		},
		{
			MethodName: "GetComponents",
			Handler:    _ProtectedEntityTypeManager_GetComponents_Handler,
		},
		{
			MethodName: "GetMetadataReader",
			Handler:    _ProtectedEntityTypeManager_GetMetadataReader_Handler,
		},
		{
			MethodName: "GetDataReader",
			Handler:    _ProtectedEntityTypeManager_GetDataReader_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ProtectedEntityTypeManager_Read_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _ProtectedEntityTypeManager_ReadAt_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ProtectedEntityTypeManager_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protected_entity_type_manager.proto",
}
